<?php 
/*
 * This file is part of BrilliantSearch-v2.0.3.1.zip.
 *
 * (c) Antropy <info@antropy.co.uk>
 *
 * For the full copyright and license information, please view the LICENSE.txt
 * file that was distributed with this source code.
 *
 * Do not edit this file. Check http://www.opencart.com/index.php?route=extension/extension&filter_username=judge for updates.
 */
?><?php
class ModelExtensionModuleBrilliantSearch extends Model {
	
    public function install() {
		$this->db->query("DROP TABLE IF EXISTS `" . DB_PREFIX . "dictionary`;");
		$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "dictionary` ( " .
						"  `word` varchar(64) NOT NULL, " .
						"  `language_id` int(11) NOT NULL, " .
						"  `length` int(3) NOT NULL, " .
						"  `product_ids` text NOT NULL, " .
						"  `category_ids` text NOT NULL, " .
						"  UNIQUE KEY `word` (`word`,`language_id`) " .
						") ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");
		
		$this->db->query("DROP TABLE IF EXISTS `" . DB_PREFIX . "dictionary_titles`;");
		$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "dictionary_titles` ( " .
						"  `word` varchar(64) NOT NULL, " .
						"  `language_id` int(11) NOT NULL, " .
						"  `length` int(3) NOT NULL, " .
						"  `product_ids` text NOT NULL, " .
						"  `category_ids` text NOT NULL, " .
						"  UNIQUE KEY `word` (`word`,`language_id`) " .
						") ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");
		
		$this->init();
    }
    public function uninstall() {
		$this->db->query("DROP TABLE IF EXISTS `" . DB_PREFIX . "dictionary`;");
		$this->db->query("DROP TABLE IF EXISTS `" . DB_PREFIX . "dictionary_titles`;");
    }
	
	public function init() {
		
		$this->load->model('catalog/product');
		$this->load->model('catalog/category');

		$this->db->query("TRUNCATE " . DB_PREFIX . "dictionary");
		$dictionary = array();
				$ps = $this->model_catalog_product->getProducts();
		foreach ($ps as $p) {
			$this->addProductToDictionary($p['product_id'], $dictionary, true);
		}
				$cs = $this->model_catalog_category->getCategories();
		foreach ($cs as $c) {
			$this->addCategoryToDictionary($c['category_id'], $dictionary, true);
		}
				$this->populateDatabase('dictionary', $dictionary);
        
				$this->db->query("TRUNCATE " . DB_PREFIX . "dictionary_titles");
		$dictionary = array();
				$ps = $this->model_catalog_product->getProducts();
		foreach ($ps as $p) {
			$this->addProductToDictionary($p['product_id'], $dictionary);
		}
				$cs = $this->model_catalog_category->getCategories();
		foreach ($cs as $c) {
			$this->addCategoryToDictionary($c['category_id'], $dictionary);
		}
				$this->populateDatabase('dictionary_titles', $dictionary);
	}
	
	public function addCategory($categoryId) {
		$dictionary = array();
		$this->addCategoryToDictionary($categoryId, $dictionary);
		$this->populateDatabase('dictionary_titles', $dictionary);
		$this->addCategoryToDictionary($categoryId, $dictionary, true);
		$this->populateDatabase('dictionary', $dictionary);
	}
	
	public function addProduct($productId) {
		$dictionary = array();
		$this->addProductToDictionary($productId, $dictionary);
		$this->populateDatabase('dictionary_titles', $dictionary);
		$this->addProductToDictionary($productId, $dictionary, true);
		$this->populateDatabase('dictionary', $dictionary);
	}
	
	public function deleteCategory($categoryId) {
		$this->db->query("UPDATE " . DB_PREFIX . "dictionary SET category_ids = REPLACE(product_ids, ' " . (int)$categoryId . " ', ' ')");
		$this->db->query("UPDATE " . DB_PREFIX . "dictionary_titles SET category_ids = REPLACE(product_ids, ' " . (int)$categoryId . " ', ' ')");
		
				$this->db->query("DELETE FROM " . DB_PREFIX . "dictionary WHERE TRIM(category_ids)='' AND TRIM(product_ids)=''");
		$this->db->query("DELETE FROM " . DB_PREFIX . "dictionary_titles WHERE TRIM(category_ids)='' AND TRIM(product_ids)=''");
	}
	
	public function deleteProduct($productId) {
		$this->db->query("UPDATE " . DB_PREFIX . "dictionary SET product_ids = REPLACE(product_ids, ' " . (int)$productId . " ', ' ')");
		$this->db->query("UPDATE " . DB_PREFIX . "dictionary_titles SET product_ids = REPLACE(product_ids, ' " . (int)$productId . " ', ' ')");
		
				$this->db->query("DELETE FROM " . DB_PREFIX . "dictionary WHERE TRIM(category_ids)='' AND TRIM(product_ids)=''");
		$this->db->query("DELETE FROM " . DB_PREFIX . "dictionary_titles WHERE TRIM(category_ids)='' AND TRIM(product_ids)=''");
	}
	
		
	
	protected function addCategoryToDictionary($categoryId, &$dictionary, $includeDescriptions=false) {
		$this->load->model('catalog/category');
		$cds = $this->model_catalog_category->getCategoryDescriptions($categoryId);
		foreach ($cds as $lang_id => $cd) {
			$words = array();
			$names = $this->getWordArray($cd['name']);
			if ($includeDescriptions) {
				$descriptions = $this->getWordArray($cd['description']);
			} else {
				$descriptions = array();
			}
			foreach ($names as $name) {
				$words[] = $this->sanitizeWord($name);
			}
			foreach ($descriptions as $description) {
				$words[] = $this->sanitizeWord($description);
			}
						$uniqueWords = $this->arrayUnique($words); 			foreach ($uniqueWords as $word) {
								if (mb_strlen($word) > 2) {
					if (isset($dictionary[$word][$lang_id]['category_ids'])) {
						$dictionary[$word][$lang_id]['category_ids'] .= $categoryId . ' ';
					} else {
						$dictionary[$word][$lang_id]['category_ids'] = $categoryId . ' ';
					}
				}
			}
		}
	}
	
	
	protected function addProductToDictionary($productId, &$dictionary, $includeDescriptions=false) {
		$this->load->model('catalog/product');
		$pds = $this->model_catalog_product->getProductDescriptions($productId);
		foreach ($pds as $lang_id => $pd) {
			$words = array();
			$names        = $this->getWordArray($pd['name']);
			if ($includeDescriptions) {				
				$descriptions = $this->getWordArray($pd['description']);
				$tags         = $this->getWordArray($pd['tag']);
			} else {
				$descriptions = array();
				$tags = array();
			}
			foreach ($names as $name) {
				$words[] = $this->sanitizeWord($name);
			}
			foreach ($descriptions as $description) {
				$words[] = $this->sanitizeWord($description);
			}
			foreach ($tags as $tag) {
				$words[] = $this->sanitizeWord($tag);
			}
						$uniqueWords = $this->arrayUnique($words); 			foreach ($uniqueWords as $word) {
								if (mb_strlen($word) > 2) {
					if (isset($dictionary[$word][$lang_id]['product_ids'])) {
						$dictionary[$word][$lang_id]['product_ids'] .= $productId . ' ';
					} else {
						$dictionary[$word][$lang_id]['product_ids'] = $productId . ' ';
					}
				}
			}
		}
	}
	
    protected function arrayUnique($array, $key = null)
    {
        if (!is_array($array)) {
            return $array;
        }

        if ($key != null) {
            $values = array();
            foreach ($array as $k => &$value) {
                if (isset($value[$key]) && in_array($value[$key], $values)) {
                    unset($array[$k]);
                } else {
                    array_push($values, $value[$key]);
                }
            }
        } else {
            foreach ($array as &$value) {
                $value = serialize($value);
            }

            $array = array_unique($array);

            foreach ($array as &$value) {
                $value = unserialize($value);
            }
        }

        return $array;
    }
	
	protected function getWordArray($string) {
		return explode(' ', preg_replace('/\s+/', ' ', str_replace(array("&nbsp;","\xA0", "&amp;"), array(" ", " ", "&"), mb_strtolower($this->strip_html_tags(html_entity_decode($string, ENT_QUOTES, 'UTF-8'))))));
	}
	
	protected function strip_html_tags($text) {
		$text = preg_replace(
			array(
			  				'@<head[^>]*?>.*?</head>@siu',
				'@<style[^>]*?>.*?</style>@siu',
				'@<script[^>]*?.*?</script>@siu',
				'@<object[^>]*?.*?</object>@siu',
				'@<embed[^>]*?.*?</embed>@siu',
				'@<applet[^>]*?.*?</applet>@siu',
				'@<noframes[^>]*?.*?</noframes>@siu',
				'@<noscript[^>]*?.*?</noscript>@siu',
				'@<noembed[^>]*?.*?</noembed>@siu',
			  				'@</?((address)|(blockquote)|(center)|(del))@iu',
				'@</?((div)|(h[1-9])|(ins)|(isindex)|(p)|(pre))@iu',
				'@</?((dir)|(dl)|(dt)|(dd)|(li)|(menu)|(ol)|(ul))@iu',
				'@</?((table)|(th)|(td)|(caption))@iu',
				'@</?((form)|(button)|(fieldset)|(legend)|(input))@iu',
				'@</?((label)|(select)|(optgroup)|(option)|(textarea))@iu',
				'@</?((frameset)|(frame)|(iframe))@iu',
			),
			array(
				' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
				"\n\$0", "\n\$0", "\n\$0", "\n\$0", "\n\$0", "\n\$0",
				"\n\$0", "\n\$0",
			),
			$text
		);
    return strip_tags($text);
}
	
	protected function populateDatabase($database, $dictionary) {
		foreach ($dictionary as $word => $lang) {
			foreach ($lang as $lang_id => $ids) {
								$query = $this->db->query("SELECT * FROM " . DB_PREFIX . $database . " WHERE language_id = '" . (int)$lang_id . "' AND word = '" . $this->db->escape($word). "'");
				if ($query->num_rows == 0) {
															if (!isset($ids['product_ids'])) {
						$ids['product_ids'] = ' ';
					} else {
						$ids['product_ids'] = ' ' . $ids['product_ids'];
					}
										if (!isset($ids['category_ids'])) {
						$ids['category_ids'] = ' ';
					} else {
						$ids['category_ids'] = ' ' . $ids['category_ids'];
					}
					$this->db->query("INSERT INTO " . DB_PREFIX . $database . " SET product_ids = '" . $this->db->escape($ids['product_ids']) . "', category_ids = '" . $this->db->escape($ids['category_ids']) . "', language_id = '" . (int)$lang_id . "', `length` = '" . (int)mb_strlen($word). "', word = '" . $this->db->escape($word). "'");
				} else {
					if (!isset($ids['product_ids'])) {
						$ids['product_ids'] = ' ';
					}
					if (!isset($ids['category_ids'])) {
						$ids['category_ids'] = ' ';
					}
										$query = $this->db->query("UPDATE " . DB_PREFIX . $database . " SET product_ids = CONCAT(product_ids, '" . $this->db->escape($ids['product_ids']) . "'), category_ids = CONCAT(category_ids, '" . $this->db->escape($ids['category_ids']) . "') WHERE language_id = '" . (int)$lang_id . "' AND word = '" . $this->db->escape($word). "'");
				}
			}
		}
	}
	
	protected function sanitizeWord($word) {
		return trim(preg_replace('/\s+/', ' ', str_replace(array("&nbsp;","\xA0", "&amp;"), array(" ", " ", "&"), mb_strtolower($word))), " \t.,:()\n\r\0\x0B");
	}
}
