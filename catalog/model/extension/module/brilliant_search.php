<?php
/*
 * This file is part of BrilliantSearch-v2.0.3.1.zip.
 *
 * (c) Antropy <info@antropy.co.uk>
 *
 * For the full copyright and license information, please view the LICENSE.txt
 * file that was distributed with this source code.
 *
 * Do not edit this file. Check http://www.opencart.com/index.php?route=extension/extension&filter_username=judge for updates.
 */
?><?php

class ModelExtensionModuleBrilliantSearch extends Model
{




    public function getCategoriesDetailed($data = array())
    {
        $sql = "SELECT cp.category_id AS category_id, c1.image, cd2.description, GROUP_CONCAT(cd1.name ORDER BY cp.level SEPARATOR '&nbsp;&nbsp;&gt;&nbsp;&nbsp;') AS name, c1.parent_id, c1.sort_order FROM " . DB_PREFIX . "category_path cp LEFT JOIN " . DB_PREFIX . "category c1 ON (cp.category_id = c1.category_id) LEFT JOIN " . DB_PREFIX . "category c2 ON (cp.path_id = c2.category_id) LEFT JOIN " . DB_PREFIX . "category_description cd1 ON (cp.path_id = cd1.category_id) LEFT JOIN " . DB_PREFIX . "category_description cd2 ON (cp.category_id = cd2.category_id) LEFT JOIN " . DB_PREFIX . "category_to_store c2s ON (c2.category_id = c2s.category_id) WHERE cd1.language_id = '" . (int) $this->config->get('config_language_id') . "' AND cd2.language_id = '" . (int) $this->config->get('config_language_id') . "' AND c2s.store_id = '" . (int) $this->config->get('config_store_id') . "'  AND c2.status = '1'";

        if (!empty($data['filter_name'])) {
					$sql .= " AND (";
					$implode = array();
                    $implode_description = array();
	
					$words = explode(' ', trim(preg_replace('/\s+/', ' ', $data['filter_name'])));
	
					foreach ($words as $word) {
						$implode[] = "cd2.name LIKE '%" . $this->db->escape($word) . "%'";
                        //$implode_description[] = "cd2.description LIKE '%" . $this->db->escape($word) . "%'";
					}
	
					if ($implode) {
						$sql .= " " . implode(" AND ", $implode) . "";
					}
                    // if ($implode_description) {
                    //     $sql .= " OR (" . implode(" OR ", $implode_description) . ")";
                    // }
            //$sql .= " OR (cd2.description LIKE '%" . $this->db->escape($data['filter_name']) . "%'";
        }

        if (isset($data['filter_name']) && $this->config->get('module_brilliant_search_status')) {
            if (isset($data['category_ids']) && count($data['category_ids']) > 0) {
				$sql .= " OR cp.category_id IN (" . implode(',', $data['category_ids']) . ")";

            }
        }

        if (!empty($data['filter_name'])) {
            $sql .= ")";
        }

        $sql .= " GROUP BY cp.category_id";

        $sort_data = array(
            'name',
            'sort_order'
        );

        if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
            $sql .= " ORDER BY " . $data['sort'];
        } else {
            $sql .= " ORDER BY sort_order";
        }

        if (isset($data['order']) && ($data['order'] == 'DESC')) {
            $sql .= " DESC";
        } else {
            $sql .= " ASC";
        }

        if (isset($data['start']) || isset($data['limit'])) {
            if ($data['start'] < 0) {
                $data['start'] = 0;
            }

            if ($data['limit'] < 1) {
                $data['limit'] = 20;
            }

            $sql .= " LIMIT " . (int) $data['start'] . "," . (int) $data['limit'];
        }

        $category_data = array();

        $query = $this->db->query($sql);

        foreach ($query->rows as $result) {
            $category_data[$result['category_id']] = $result;
        }

        return $category_data;
    }

    public function getTotalCategoriesDetailed($data = array())
    {

        $sql = "SELECT COUNT(DISTINCT cp.category_id) AS total FROM " . DB_PREFIX . "category_path cp LEFT JOIN " . DB_PREFIX . "category c1 ON (cp.category_id = c1.category_id) LEFT JOIN " . DB_PREFIX . "category c2 ON (cp.path_id = c2.category_id) LEFT JOIN " . DB_PREFIX . "category_description cd1 ON (cp.path_id = cd1.category_id) LEFT JOIN " . DB_PREFIX . "category_description cd2 ON (cp.category_id = cd2.category_id) LEFT JOIN " . DB_PREFIX . "category_to_store c2s ON (c2.category_id = c2s.category_id) WHERE cd1.language_id = '" . (int) $this->config->get('config_language_id') . "' AND cd2.language_id = '" . (int) $this->config->get('config_language_id') . "' AND c2s.store_id = '" . (int) $this->config->get('config_store_id') . "'  AND c2.status = '1'";

        if (!empty($data['filter_name'])) {
					$sql .= " AND (";
					$implode = array();
	
					$words = explode(' ', trim(preg_replace('/\s+/', ' ', $data['filter_name'])));
	
					foreach ($words as $word) {
						$implode[] = "cd2.name LIKE '%" . $this->db->escape($word) . "%'";                        
					}
	
					if ($implode) {
						$sql .= " " . implode(" AND ", $implode) . "";
					}
        	
            //$sql .= " AND (cd2.name LIKE '" . $this->db->escape($data['filter_name']) . "%'";
        }

        if (isset($data['filter_name']) && $this->config->get('module_brilliant_search_status')) {
            if (isset($data['category_ids']) && count($data['category_ids']) > 0) {
				$sql .= " OR cp.category_id IN (" . implode(',', $data['category_ids']) . ")";

            }
        }

        if (!empty($data['filter_name'])) {
            $sql .= ")";
        }

        $sql .= " GROUP BY cp.category_id";

        $sort_data = array(
            'name',
            'sort_order'
        );

        if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
            $sql .= " ORDER BY " . $data['sort'];
        } else {
            $sql .= " ORDER BY sort_order";
        }

        if (isset($data['order']) && ($data['order'] == 'DESC')) {
            $sql .= " DESC";
        } else {
            $sql .= " ASC";
        }

        if (isset($data['start']) || isset($data['limit'])) {
            if ($data['start'] < 0) {
                $data['start'] = 0;
            }

            if ($data['limit'] < 1) {
                $data['limit'] = 20;
            }

            $sql .= " LIMIT " . (int) $data['start'] . "," . (int) $data['limit'];
        }

        $category_data = array();

        $query = $this->db->query($sql);

        return $query['total'];
    }


    public function levenshteinDistance2($str1, $str2)
    {

        $len1 = mb_strlen($str1);
        $len2 = mb_strlen($str2);

                $i = 0;
        do {
            if (mb_substr($str1, $i, 1) != mb_substr($str2, $i, 1))
                break;
            $i++;
            $len1--;
            $len2--;
        } while ($len1 > 0 && $len2 > 0);
        if ($i > 0) {
            $str1 = mb_substr($str1, $i);
            $str2 = mb_substr($str2, $i);
        }

                $i = 0;
        if ($len1 > 0 && $len2 > 0) {
            do {
                if (mb_substr($str1, $len1 - 1, 1) != mb_substr($str2, $len2 - 1, 1))
                    break;
                $i++;
                $len1--;
                $len2--;
            } while ($len1 > 0 && $len2 > 0);
        }
        if ($i > 0) {
            $str1 = mb_substr($str1, 0, $len1);
            $str2 = mb_substr($str2, 0, $len2);
        }

        if ($len1 == 0)
            return $len2;
        if ($len2 == 0)
            return $len1;

        $v0 = range(0, $len1);
        $v1 = array();

        for ($i = 1; $i <= $len2; $i++) {
            $v1[0] = $i;
            $str2j = mb_substr($str2, $i - 1, 1);

            for ($j = 1; $j <= $len1; $j++) {
                $cost = (mb_substr($str1, $j - 1, 1) == $str2j) ? 0 : 1;

                $m_min = $v0[$j] + 1;
                $b = $v1[$j - 1] + 1;
                $c = $v0[$j - 1] + $cost;

                if ($b < $m_min)
                    $m_min = $b;
                if ($c < $m_min)
                    $m_min = $c;

                $v1[$j] = $m_min;
            }

            $vTmp = $v0;
            $v0 = $v1;
            $v1 = $vTmp;
        }

        return $v0[$len1];
    }


    public function getSimilarItems($languageId, $filter_name, $filter_description = false)
    {

        $threshold = $this->config->get('module_brilliant_search_fuzzyness') / 100;
        $words = explode(' ', trim(preg_replace('/\s+/', ' ', $filter_name)));
		$words = array_map('strtolower', $words);
        $lenArr = array_map('mb_strlen', $words);
        $maxlen = floor(max($lenArr) / $threshold);
        $minlen = ceil(min($lenArr) * $threshold);

        if ($filter_description) {
            $sql = "SELECT * FROM " . DB_PREFIX . "dictionary WHERE " .
                "length >= '" . (int) $minlen . "' AND length <= '" . (int) $maxlen . "'";
        } else {
            $sql = "SELECT * FROM " . DB_PREFIX . "dictionary_titles WHERE " .
                "length >= '" . (int) $minlen . "' AND length <= '" . (int) $maxlen . "'";
        }
        $sql .= " AND language_id = '" . (int) $languageId . "'";

        $query = $this->db->query($sql);

        $matchedIds = array();
        $matchedIds['product_ids'] = array();
        $matchedIds['category_ids'] = array();
		if (true) { 			$noOfWords = count($words);
			foreach ($words as $word) {
				foreach ($query->rows as $result) {
															$distance = $this->levenshteinDistance2($result['word'], $word);
					$percentage = 1 - (($distance / strlen($word)));
					if ($percentage > $threshold) {
						$productIds = explode(' ', $result['product_ids']);
												foreach ($productIds as $productId) {
							$productId = trim($productId);
							if (isset($productId) && ($productId != '') && ($productId != '0') && (!isset($productIds[$productId]))) {
								if (isset($matchedIds['product_ids'][$productId])) {
									$matchedIds['product_ids'][$productId]--;
								} else {
									$matchedIds['product_ids'][$productId] = $noOfWords - 1;
								}
							}
						}
						$categoryIds = explode(' ', $result['category_ids']);
						foreach ($categoryIds as $categoryId) {
							$categoryId = trim($categoryId);
							if (isset($categoryId) && ($categoryId != '') && ($categoryId != '0') && (!isset($categoryIds[$categoryId]))) {
								if (isset($matchedIds['category_ids'][$categoryId])) {
									$matchedIds['category_ids'][$categoryId]--;
								} else {
									$matchedIds['category_ids'][$categoryId] = $noOfWords - 1;
								}
							}
						}
					}
				}
			}
			$matchedIds['product_ids'] = array_keys($matchedIds['product_ids'], (count($matchedIds['product_ids']) > 0) ? min($matchedIds['product_ids']) : 0);
			$matchedIds['category_ids'] = array_keys($matchedIds['category_ids'], (count($matchedIds['category_ids']) > 0) ? min($matchedIds['category_ids']) : 0);
		} else {
			foreach ($words as $word) {
				foreach ($query->rows as $result) {
															$distance = $this->levenshteinDistance2($result['word'], $word);
					$percentage = 1 - (($distance / strlen($word)));
					if ($percentage > $threshold) {
						$productIds = explode(' ', $result['product_ids']);
												foreach ($productIds as $productId) {
							$productId = trim($productId);
							if (isset($productId) && ($productId != '') && ($productId != '0') && (!isset($productIds[$productId]))) {
								$matchedIds['product_ids'][$productId] = $productId;
							}
						}
						$categoryIds = explode(' ', $result['category_ids']);
						foreach ($categoryIds as $categoryId) {
							$categoryId = trim($categoryId);
							if (isset($categoryId) && ($categoryId != '') && ($categoryId != '0') && (!isset($categoryIds[$categoryId]))) {
								$matchedIds['category_ids'][$categoryId] = $categoryId;
							}
						}
					}
				}
			}
		}
        return $matchedIds;
    }

}
